(defn every-vector? [a] (every? vector? a))
(defn every-number? [a] (every? true? (mapv (fn [a] (every? number? a)) a)))
(defn size? [a] (apply == (mapv count a)))
(defn every-matrix-vector? [a] (every? true? (mapv (fn [a] (every? vector? a)) a)))
(defn for-vector? [a] (and (every-vector? a) (every-number? a) (size? a)))
(defn for-matrix? [a] (and (every? vector? a) (size? a)))
(defn vecNum? [a] (every? (fn [b] (or (vector? b) (number? b))) a))
(defn broadcast? [a] (let [arr (filter vector? a)] (every? (fn [b] (= (count b) (count (first arr)))) arr)))
(defn matrix? [a] (and (every? vector? a) (size? a)))


(defn factory-vec [op check] (fn cal [& a] {:pre [(check a)]} (apply mapv op a)))
(def v+ (factory-vec + for-vector?))
(def v- (factory-vec - for-vector?))
(def v* (factory-vec * for-vector?))
(def vd (factory-vec / for-vector?))
(def m+ (factory-vec v+ for-matrix?))
(def m- (factory-vec v- for-matrix?))
(def m* (factory-vec v* for-matrix?))
(def md (factory-vec vd for-matrix?))
(defn tensor [op] (fn cal [& a] {:pre [(vecNum? a) (broadcast? a)]}
                    (if (every? number? a)
                      (apply op a)
                      (apply mapv cal (mapv (fn [b] (if (number? b) (repeat b) b)) a)))))
(def tb+ (tensor +))
(def tb- (tensor -))
(def tb* (tensor *))
(def tbd (tensor /))
(defn forge2 [f a b] (mapv f a (repeat b)))
(defn v*s [v & a] {:pre [(for-vector? [v]) (every? number? a)]} (forge2 * v (apply * a)))
(defn scalar [& v] {:pre [(for-vector? v)]} (apply + (apply v* v)))
(defn m*s [v & a] {:pre [(for-vector? v) (every? number? a)]} (forge2 v*s v (apply * a)))
(defn m*v [a b] (forge2 scalar a b))
(defn transpose [a] {:pre [(vector? a) (every? vector? a) (every-number? a)]} (apply mapv vector a))
(defn m*m [& a] {:pre [(every? vector? a) (every-matrix-vector? a)]}
  (reduce (fn [a b] (mapv m*v (repeat (transpose b)) a)) a))
(defn vect [& a] {:pre [(every-vector? a) (every-number? a) (every? (fn[b] (== (count b) 3)) a)]}
  (reduce (fn [a b] [(- (* (nth a 1) (nth b 2)) (* (nth a 2) (nth b 1)))
                     (- (* (nth a 2) (nth b 0)) (* (nth a 0) (nth b 2)))
                     (- (* (nth a 0) (nth b 1)) (* (nth a 1) (nth b 0)))]) a))
